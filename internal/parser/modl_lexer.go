// Code generated from grammar/antlr4/MODLLexer.g4 by ANTLR 4.8. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 16, 186,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 3, 2,
	6, 2, 47, 10, 2, 13, 2, 14, 2, 48, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3,
	11, 3, 12, 3, 12, 3, 13, 5, 13, 84, 10, 13, 3, 13, 3, 13, 3, 13, 6, 13,
	89, 10, 13, 13, 13, 14, 13, 90, 5, 13, 93, 10, 13, 3, 13, 5, 13, 96, 10,
	13, 3, 14, 3, 14, 3, 14, 7, 14, 101, 10, 14, 12, 14, 14, 14, 104, 11, 14,
	5, 14, 106, 10, 14, 3, 15, 3, 15, 5, 15, 110, 10, 15, 3, 15, 3, 15, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 7, 16, 120, 10, 16, 12, 16, 14,
	16, 123, 11, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 7, 16,
	132, 10, 16, 12, 16, 14, 16, 135, 11, 16, 3, 16, 5, 16, 138, 10, 16, 3,
	17, 3, 17, 3, 18, 3, 18, 3, 19, 3, 19, 5, 19, 146, 10, 19, 3, 19, 3, 19,
	6, 19, 150, 10, 19, 13, 19, 14, 19, 151, 3, 19, 6, 19, 155, 10, 19, 13,
	19, 14, 19, 156, 3, 19, 3, 19, 6, 19, 161, 10, 19, 13, 19, 14, 19, 162,
	7, 19, 165, 10, 19, 12, 19, 14, 19, 168, 11, 19, 3, 20, 3, 20, 3, 21, 3,
	21, 3, 22, 3, 22, 5, 22, 176, 10, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22,
	5, 22, 183, 10, 22, 5, 22, 185, 10, 22, 2, 2, 23, 3, 3, 5, 4, 7, 5, 9,
	6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 2,
	29, 2, 31, 15, 33, 2, 35, 2, 37, 16, 39, 2, 41, 2, 43, 2, 3, 2, 11, 5,
	2, 11, 12, 15, 15, 34, 34, 3, 2, 50, 59, 3, 2, 51, 59, 4, 2, 71, 71, 103,
	103, 4, 2, 45, 45, 47, 47, 3, 2, 36, 36, 3, 2, 98, 98, 12, 2, 10, 12, 14,
	15, 34, 34, 36, 36, 42, 43, 61, 61, 63, 63, 93, 95, 98, 98, 128, 128, 9,
	2, 49, 49, 94, 94, 100, 100, 104, 104, 112, 112, 116, 116, 118, 119, 2,
	203, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2,
	2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3,
	2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25,
	3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 3, 46, 3, 2, 2, 2, 5,
	52, 3, 2, 2, 2, 7, 57, 3, 2, 2, 2, 9, 62, 3, 2, 2, 2, 11, 68, 3, 2, 2,
	2, 13, 70, 3, 2, 2, 2, 15, 72, 3, 2, 2, 2, 17, 74, 3, 2, 2, 2, 19, 76,
	3, 2, 2, 2, 21, 78, 3, 2, 2, 2, 23, 80, 3, 2, 2, 2, 25, 83, 3, 2, 2, 2,
	27, 105, 3, 2, 2, 2, 29, 107, 3, 2, 2, 2, 31, 137, 3, 2, 2, 2, 33, 139,
	3, 2, 2, 2, 35, 141, 3, 2, 2, 2, 37, 145, 3, 2, 2, 2, 39, 169, 3, 2, 2,
	2, 41, 171, 3, 2, 2, 2, 43, 184, 3, 2, 2, 2, 45, 47, 9, 2, 2, 2, 46, 45,
	3, 2, 2, 2, 47, 48, 3, 2, 2, 2, 48, 46, 3, 2, 2, 2, 48, 49, 3, 2, 2, 2,
	49, 50, 3, 2, 2, 2, 50, 51, 8, 2, 2, 2, 51, 4, 3, 2, 2, 2, 52, 53, 7, 112,
	2, 2, 53, 54, 7, 119, 2, 2, 54, 55, 7, 110, 2, 2, 55, 56, 7, 110, 2, 2,
	56, 6, 3, 2, 2, 2, 57, 58, 7, 118, 2, 2, 58, 59, 7, 116, 2, 2, 59, 60,
	7, 119, 2, 2, 60, 61, 7, 103, 2, 2, 61, 8, 3, 2, 2, 2, 62, 63, 7, 104,
	2, 2, 63, 64, 7, 99, 2, 2, 64, 65, 7, 110, 2, 2, 65, 66, 7, 117, 2, 2,
	66, 67, 7, 103, 2, 2, 67, 10, 3, 2, 2, 2, 68, 69, 7, 63, 2, 2, 69, 12,
	3, 2, 2, 2, 70, 71, 7, 61, 2, 2, 71, 14, 3, 2, 2, 2, 72, 73, 7, 46, 2,
	2, 73, 16, 3, 2, 2, 2, 74, 75, 7, 42, 2, 2, 75, 18, 3, 2, 2, 2, 76, 77,
	7, 43, 2, 2, 77, 20, 3, 2, 2, 2, 78, 79, 7, 93, 2, 2, 79, 22, 3, 2, 2,
	2, 80, 81, 7, 95, 2, 2, 81, 24, 3, 2, 2, 2, 82, 84, 7, 47, 2, 2, 83, 82,
	3, 2, 2, 2, 83, 84, 3, 2, 2, 2, 84, 85, 3, 2, 2, 2, 85, 92, 5, 27, 14,
	2, 86, 88, 7, 48, 2, 2, 87, 89, 9, 3, 2, 2, 88, 87, 3, 2, 2, 2, 89, 90,
	3, 2, 2, 2, 90, 88, 3, 2, 2, 2, 90, 91, 3, 2, 2, 2, 91, 93, 3, 2, 2, 2,
	92, 86, 3, 2, 2, 2, 92, 93, 3, 2, 2, 2, 93, 95, 3, 2, 2, 2, 94, 96, 5,
	29, 15, 2, 95, 94, 3, 2, 2, 2, 95, 96, 3, 2, 2, 2, 96, 26, 3, 2, 2, 2,
	97, 106, 7, 50, 2, 2, 98, 102, 9, 4, 2, 2, 99, 101, 9, 3, 2, 2, 100, 99,
	3, 2, 2, 2, 101, 104, 3, 2, 2, 2, 102, 100, 3, 2, 2, 2, 102, 103, 3, 2,
	2, 2, 103, 106, 3, 2, 2, 2, 104, 102, 3, 2, 2, 2, 105, 97, 3, 2, 2, 2,
	105, 98, 3, 2, 2, 2, 106, 28, 3, 2, 2, 2, 107, 109, 9, 5, 2, 2, 108, 110,
	9, 6, 2, 2, 109, 108, 3, 2, 2, 2, 109, 110, 3, 2, 2, 2, 110, 111, 3, 2,
	2, 2, 111, 112, 5, 27, 14, 2, 112, 30, 3, 2, 2, 2, 113, 121, 7, 36, 2,
	2, 114, 120, 5, 33, 17, 2, 115, 116, 7, 128, 2, 2, 116, 120, 7, 36, 2,
	2, 117, 118, 7, 94, 2, 2, 118, 120, 7, 36, 2, 2, 119, 114, 3, 2, 2, 2,
	119, 115, 3, 2, 2, 2, 119, 117, 3, 2, 2, 2, 120, 123, 3, 2, 2, 2, 121,
	119, 3, 2, 2, 2, 121, 122, 3, 2, 2, 2, 122, 124, 3, 2, 2, 2, 123, 121,
	3, 2, 2, 2, 124, 138, 7, 36, 2, 2, 125, 133, 7, 98, 2, 2, 126, 132, 5,
	35, 18, 2, 127, 128, 7, 128, 2, 2, 128, 132, 7, 98, 2, 2, 129, 130, 7,
	94, 2, 2, 130, 132, 7, 98, 2, 2, 131, 126, 3, 2, 2, 2, 131, 127, 3, 2,
	2, 2, 131, 129, 3, 2, 2, 2, 132, 135, 3, 2, 2, 2, 133, 131, 3, 2, 2, 2,
	133, 134, 3, 2, 2, 2, 134, 136, 3, 2, 2, 2, 135, 133, 3, 2, 2, 2, 136,
	138, 7, 98, 2, 2, 137, 113, 3, 2, 2, 2, 137, 125, 3, 2, 2, 2, 138, 32,
	3, 2, 2, 2, 139, 140, 10, 7, 2, 2, 140, 34, 3, 2, 2, 2, 141, 142, 10, 8,
	2, 2, 142, 36, 3, 2, 2, 2, 143, 144, 7, 37, 2, 2, 144, 146, 7, 34, 2, 2,
	145, 143, 3, 2, 2, 2, 145, 146, 3, 2, 2, 2, 146, 149, 3, 2, 2, 2, 147,
	150, 5, 43, 22, 2, 148, 150, 5, 39, 20, 2, 149, 147, 3, 2, 2, 2, 149, 148,
	3, 2, 2, 2, 150, 151, 3, 2, 2, 2, 151, 149, 3, 2, 2, 2, 151, 152, 3, 2,
	2, 2, 152, 166, 3, 2, 2, 2, 153, 155, 7, 34, 2, 2, 154, 153, 3, 2, 2, 2,
	155, 156, 3, 2, 2, 2, 156, 154, 3, 2, 2, 2, 156, 157, 3, 2, 2, 2, 157,
	160, 3, 2, 2, 2, 158, 161, 5, 43, 22, 2, 159, 161, 5, 39, 20, 2, 160, 158,
	3, 2, 2, 2, 160, 159, 3, 2, 2, 2, 161, 162, 3, 2, 2, 2, 162, 160, 3, 2,
	2, 2, 162, 163, 3, 2, 2, 2, 163, 165, 3, 2, 2, 2, 164, 154, 3, 2, 2, 2,
	165, 168, 3, 2, 2, 2, 166, 164, 3, 2, 2, 2, 166, 167, 3, 2, 2, 2, 167,
	38, 3, 2, 2, 2, 168, 166, 3, 2, 2, 2, 169, 170, 10, 9, 2, 2, 170, 40, 3,
	2, 2, 2, 171, 172, 9, 9, 2, 2, 172, 42, 3, 2, 2, 2, 173, 175, 7, 94, 2,
	2, 174, 176, 9, 10, 2, 2, 175, 174, 3, 2, 2, 2, 176, 185, 3, 2, 2, 2, 177,
	178, 7, 94, 2, 2, 178, 185, 5, 41, 21, 2, 179, 182, 7, 128, 2, 2, 180,
	183, 5, 41, 21, 2, 181, 183, 7, 119, 2, 2, 182, 180, 3, 2, 2, 2, 182, 181,
	3, 2, 2, 2, 183, 185, 3, 2, 2, 2, 184, 173, 3, 2, 2, 2, 184, 177, 3, 2,
	2, 2, 184, 179, 3, 2, 2, 2, 185, 44, 3, 2, 2, 2, 26, 2, 48, 83, 90, 92,
	95, 102, 105, 109, 119, 121, 131, 133, 137, 145, 149, 151, 156, 160, 162,
	166, 175, 182, 184, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "", "'null'", "'true'", "'false'", "'='", "';'", "','", "'('", "')'",
	"'['", "']'",
}

var lexerSymbolicNames = []string{
	"", "WS", "NULL", "TRUE", "FALSE", "EQUALS", "STRUCT_SEP", "ARR_SEP", "LBRAC",
	"RBRAC", "LSBRAC", "RSBRAC", "NUMBER", "QUOTED", "STRING",
}

var lexerRuleNames = []string{
	"WS", "NULL", "TRUE", "FALSE", "EQUALS", "STRUCT_SEP", "ARR_SEP", "LBRAC",
	"RBRAC", "LSBRAC", "RSBRAC", "NUMBER", "INT", "EXP", "QUOTED", "INSIDE_QUOTES",
	"INSIDE_GRAVES", "STRING", "UNRESERVED", "RESERVED_CHARS", "ESCAPED",
}

type MODLLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewMODLLexer(input antlr.CharStream) *MODLLexer {

	l := new(MODLLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "MODLLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// MODLLexer tokens.
const (
	MODLLexerWS         = 1
	MODLLexerNULL       = 2
	MODLLexerTRUE       = 3
	MODLLexerFALSE      = 4
	MODLLexerEQUALS     = 5
	MODLLexerSTRUCT_SEP = 6
	MODLLexerARR_SEP    = 7
	MODLLexerLBRAC      = 8
	MODLLexerRBRAC      = 9
	MODLLexerLSBRAC     = 10
	MODLLexerRSBRAC     = 11
	MODLLexerNUMBER     = 12
	MODLLexerQUOTED     = 13
	MODLLexerSTRING     = 14
)
